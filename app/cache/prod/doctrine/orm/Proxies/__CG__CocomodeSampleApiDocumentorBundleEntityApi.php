<?php

namespace Proxies\__CG__\Cocomode\SampleApiDocumentorBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Api extends \Cocomode\SampleApiDocumentorBundle\Entity\Api implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'route1', 'route2', 'route3', 'route4', 'route5', 'route6', 'type', 'statusCode', 'contentType', 'response', 'createdAt', 'updatedAt', 'expireDate', 'deleteFlag', 'route');
        }

        return array('__isInitialized__', 'id', 'route1', 'route2', 'route3', 'route4', 'route5', 'route6', 'type', 'statusCode', 'contentType', 'response', 'createdAt', 'updatedAt', 'expireDate', 'deleteFlag', 'route');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Api $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute1($route1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute1', array($route1));

        return parent::setRoute1($route1);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute1', array());

        return parent::getRoute1();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute2($route2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute2', array($route2));

        return parent::setRoute2($route2);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute2', array());

        return parent::getRoute2();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute3($route3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute3', array($route3));

        return parent::setRoute3($route3);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute3', array());

        return parent::getRoute3();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute4($route4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute4', array($route4));

        return parent::setRoute4($route4);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute4', array());

        return parent::getRoute4();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute5($route5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute5', array($route5));

        return parent::setRoute5($route5);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute5', array());

        return parent::getRoute5();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute6($route6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute6', array($route6));

        return parent::setRoute6($route6);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute6', array());

        return parent::getRoute6();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusCode($statusCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusCode', array($statusCode));

        return parent::setStatusCode($statusCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusCode', array());

        return parent::getStatusCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentType($contentType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentType', array($contentType));

        return parent::setContentType($contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentType', array());

        return parent::getContentType();
    }

    /**
     * {@inheritDoc}
     */
    public function setResponse($response)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResponse', array($response));

        return parent::setResponse($response);
    }

    /**
     * {@inheritDoc}
     */
    public function getResponse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResponse', array());

        return parent::getResponse();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpireDate($expireDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpireDate', array($expireDate));

        return parent::setExpireDate($expireDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpireDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpireDate', array());

        return parent::getExpireDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleteFlag($deleteFlag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleteFlag', array($deleteFlag));

        return parent::setDeleteFlag($deleteFlag);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleteFlag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleteFlag', array());

        return parent::getDeleteFlag();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute($route)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute', array($route));

        return parent::setRoute($route);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute', array());

        return parent::getRoute();
    }

}
